// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.5.0
// LVGL version: 9.1.0
// Project name: SquareLine_Project

#ifdef _WIN64
#include <iostream>
#endif
#include "ui.h"
#include "../CommonData.h"
#include "../CommonLibrary.h"
#include "../CommonService.h"

bool regenerate = false;
bool isIncorrectButton = false;
std::vector<std::tuple<lv_obj_t*, lv_obj_t*>> listButton = { };

void Init()
{
    // Brightness
    sys_gui::Brightness.SetValue(100);
    lv_slider_set_value(ui_sldBrightness, sys_gui::Brightness.GetValue(), LV_ANIM_OFF);

    // Create list button
    listButton = {
        { ui_Button1, ui_lblButtonText1 },
        { ui_Button2, ui_lblButtonText2 },
        { ui_Button3, ui_lblButtonText3 },
        { ui_Button4, ui_lblButtonText4 },
    };

    CurrentStage.SetValue(1);

    // Update bar stage
    lv_bar_set_value(ui_barStage, 1, LV_ANIM_ON);
    lv_label_set_text(ui_lblBarValue, "1");
}

void AutoUpdate()
{
    if ((CurrentStage.GetState() || isIncorrectButton || regenerate) && (sys_gui::SuccessState.GetValue() == INCORRECT))
    {
        // Generate number
        auto displayNum = RandomRange(1, 5);
        auto listNum = GenerateArrayNumber();

        // List number not mapped with display number
        if (!StageModule(displayNum, listNum))
        {
            regenerate = true;
        }
        // List number mapped with display number
        else
        {
            regenerate = false;

            // Set display label
            lv_label_set_text(ui_lblDisplay, std::to_string(displayNum).c_str());

            // Set button label
            for (uint8_t i = 0; i < listButton.size(); i++)
            {
                auto& item = listButton[i];
                lv_label_set_text(std::get<1>(item), std::to_string(listNum[i]).c_str());
            }

#ifdef _WIN64
            debug_println("Stage: " + std::to_string(CurrentStage.GetValue()));
            debug_println("Position: " + std::to_string((uint8_t)std::get<POSITION_POS>(CurrentCorrectData.GetValue()) + 1));
            debug_println("Value: " + std::to_string((uint8_t)std::get<VALUE_POS>(CurrentCorrectData.GetValue())));
            debug_println("");
#endif
        }

        // Reset error flag
        if (isIncorrectButton)
        {
            isIncorrectButton = false;
        }
    }
#ifndef UNIT_TEST
    if (sys_gui::SuccessState.GetState()) {
        if (sys_gui::SuccessState.GetValue() != INCORRECT)
        {
            lv_obj_clear_flag(ui_imgResult, LV_OBJ_FLAG_HIDDEN);

            if (sys_gui::SuccessState.GetValue() == STATE_UNCHECK)
            {
                lv_obj_add_state(ui_imgResult, LV_STATE_DISABLED);
            }
            else if (sys_gui::SuccessState.GetValue() == STATE_CHECKED)
            {
                lv_obj_add_state(ui_imgResult, LV_STATE_CHECKED);
            }
        }
    }
#endif
}

void OnBrightnessChange(lv_event_t* e)
{
    sys_gui::Brightness.SetValue(lv_slider_get_value(ui_sldBrightness));
}

void OnButtonClick(lv_event_t* e)
{
    auto currentButton = reinterpret_cast<lv_obj_t*>(e->current_target);
    auto find = std::find_if(listButton.begin(), listButton.end(),
        [currentButton](const std::tuple<lv_obj_t*, lv_obj_t*>& item) {
            return std::get<0>(item) == currentButton;
        });

    auto buttonLabel = std::get<1>(*find);
    auto currentData = CurrentCorrectData.GetValue();
    auto buttonText = std::stoi(std::string(lv_label_get_text(buttonLabel)));

    if (buttonText == std::get<VALUE_POS>(currentData))
#ifndef UNIT_TEST
    {
        // Update current stage data list
        auto listStageData = ListStageData.GetValue();
        listStageData.push_back(currentData);
        ListStageData.SetValue(listStageData);

        auto stage = CurrentStage.GetValue();

        if (stage < STAGE_NUM)
        {
            // Set to next stage
            stage++;
            CurrentStage.SetValue(stage);

            // Update bar stage
            lv_bar_set_value(ui_barStage, stage, LV_ANIM_ON);
            lv_label_set_text(ui_lblBarValue, std::to_string(stage).c_str());
        }
        else
        {
            // Finish
            sys_gui::SuccessState.SetValue(STATE_CHECKED);

#ifndef UNIT_TEST
            // Send success to Host
            JsonDocument jsonDocIn;
#ifdef _WIN64
            jsonDocIn["module"] = CLIENT_NAME_FOR_JSON;
#else
            jsonDocIn["module"] = CLIENT_NAME;
#endif
            CommonSendRequestWithData(WM_SUCCESSSTATE_SET, jsonDocIn);
#endif
        }
    }
    else
    {
        // Reset to stage #1
        CurrentStage.SetValue(1);

        // Update bar stage
        lv_bar_set_value(ui_barStage, 1, LV_ANIM_ON);
        lv_label_set_text(ui_lblBarValue, "1");

        // Set error flag
        isIncorrectButton = true;

        // Send error to Host
#ifndef UNIT_TEST
        CommonSendRequest(WM_STRIKESTATE_SET);
#endif
    }
#else
        Assert::IsTrue(true);
    else
    {
        Assert::IsTrue(false);
    }
#endif
}
