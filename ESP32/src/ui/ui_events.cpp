// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.5.0
// LVGL version: 9.1.0
// Project name: SquareLine_Project

#include "ui.h"
#include "../CommonData.h"
#include "../CommonLibrary.h"
#include "../CommonService.h"

std::vector<lv_obj_t*> listBattery = { };
std::unordered_map<BATTERY_TYPE, lv_img_dsc_t> mapBatteryTypeImg = { };
std::unordered_map<COMPORT_TYPE, lv_img_dsc_t> mapComPortTypeImg = { };

void Init()
{
    // Brightness
    sys_gui::Brightness.SetValue(100);
    lv_slider_set_value(ui_sldBrightness, sys_gui::Brightness.GetValue(), LV_ANIM_OFF);

    // Create battery list
    listBattery = {
        ui_imgBat1,
        ui_imgBat2,
        ui_imgBat3,
        ui_imgBat4,
    };

    // Create battery type map
    mapBatteryTypeImg = {
        { BATTERY_TYPE::AA, ui_img_aa_battery_png },
        { BATTERY_TYPE::D, ui_img_d_battery_png },
    };

    // Create com port type map
    mapComPortTypeImg = {
        { COMPORT_TYPE::DVID, ui_img_dvi_d_png },
        { COMPORT_TYPE::Parallel, ui_img_parallel_png },
        { COMPORT_TYPE::PS2, ui_img_ps2_png },
        { COMPORT_TYPE::RJ45, ui_img_rj45_png },
        { COMPORT_TYPE::Serial, ui_img_serial_png },
        { COMPORT_TYPE::Stereo_RCA, ui_img_stereo_rca_png },
    };

    // Get battery info
    auto batteryNum = sys_host::BatteryNum.GetValue();
    auto batteryType = sys_host::BatteryType.GetValue();

    // Set indicator
    lv_label_set_text(ui_lblIndicator, map_LABEL_INDICATOR[sys_host::LabelIndicator.GetValue()].c_str());

    // Set serial
    lv_label_set_text(ui_lblSerial, sys_host::SerialNum.GetValue().c_str());

    // Set battery type image and visible
    for (uint8_t i = 0; i < listBattery.size(); i++)
    {
        lv_image_set_src(listBattery[i], &mapBatteryTypeImg[batteryType]);

        if (i >= batteryNum)
        {
            lv_obj_add_flag(listBattery[i], LV_OBJ_FLAG_HIDDEN);
        }
    }

    // Set comport type image
    lv_image_set_src(ui_imgComPort, &mapComPortTypeImg[sys_host::ComPortType.GetValue()]);
}

void AutoUpdate()
{
    if (sys_gui::SuccessState.GetState()) {
        if (sys_gui::SuccessState.GetValue() != INCORRECT)
        {
            lv_obj_clear_flag(ui_imgResult, LV_OBJ_FLAG_HIDDEN);

            if (sys_gui::SuccessState.GetValue() == STATE_UNCHECK)
            {
                lv_obj_add_state(ui_imgResult, LV_STATE_DISABLED);
            }
            else if (sys_gui::SuccessState.GetValue() == STATE_CHECKED)
            {
                lv_obj_add_state(ui_imgResult, LV_STATE_CHECKED);
            }
        }
    }
}

void OnBrightnessChange(lv_event_t* e)
{
    sys_gui::Brightness.SetValue(lv_slider_get_value(ui_sldBrightness));
}
