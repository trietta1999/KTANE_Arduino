// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.5.0
// LVGL version: 9.1.0
// Project name: SquareLine_Project

#ifdef _WIN64
#include <iostream>
#endif
#include <algorithm>
#include <tuple>
#include "ui.h"
#include "../CommonData.h"
#include "../CommonLibrary.h"
#include "../CommonService.h"

// For blinking
uint8_t currentButtonIndex = 0;
bool blinkState = false;
lv_timer_t* sequentialBlinkTimer = nullptr;

// For checking
uint8_t currentSelectButtonIndex = 0;

// For mapping
std::unordered_map<COLOR_TYPE, std::tuple<lv_obj_t*, uint16_t>> mapButton = { };
std::vector<std::tuple<COLOR_TYPE, lv_obj_t*, bool>> listButtonOrder = { };

void DeleteTimer()
{
    // Turn off all button
    for (const auto& item : mapButton)
    {
        lv_obj_remove_state(std::get<0>(item.second), LV_STATE_EDITED);
    }

    // Delete old timer
    if (sequentialBlinkTimer)
    {
        lv_timer_del(sequentialBlinkTimer);
        sequentialBlinkTimer = nullptr;
    }
}

void CreateTimer()
{
    // Show transparent window
    lv_obj_remove_flag(ui_wndTransparent, LV_OBJ_FLAG_HIDDEN);

    // Create new timer
    sequentialBlinkTimer = lv_timer_create([](lv_timer_t* timer) {
        auto colorList = ColorList.GetValue();

        // Blink current button
        if (currentButtonIndex < listButtonOrder.size())
        {
            auto button = std::get<0>(mapButton[colorList[currentButtonIndex]]);
            auto beepFre = std::get<1>(mapButton[colorList[currentButtonIndex]]);

            // Change blink state
            blinkState = !blinkState;

            // Turn on
            if (blinkState)
            {
                lv_obj_add_state(button, LV_STATE_EDITED);

#ifndef UNIT_TEST
                CommonBeep(beepFre, BEEP_INCREASE_DURATION);
#endif
            }
            // Turn off
            else
            {
                lv_obj_remove_state(button, LV_STATE_EDITED);
                currentButtonIndex++;
            }
        }
        // Rest
        else
        {
            // Reset state
            blinkState = false;
            currentButtonIndex = 0;

            // Hide transparent window
            lv_obj_add_flag(ui_wndTransparent, LV_OBJ_FLAG_HIDDEN);

            // Enable relay button
            lv_obj_remove_state(ui_btnReplay, LV_STATE_DISABLED);

            DeleteTimer();
        }
        }, BLINK_PERIOD, nullptr);
}

void Init()
{
    // Brightness
    sys_gui::Brightness.SetValue(100);
    lv_slider_set_value(ui_sldBrightness, sys_gui::Brightness.GetValue(), LV_ANIM_OFF);

    // Create button map with color
    mapButton = {
        { COLOR_TYPE::BLUE, { ui_btnBlue, 654 } },
        { COLOR_TYPE::YELLOW, { ui_btnYellow, 734 } },
        { COLOR_TYPE::GREEN, { ui_btnGreen, 824 } },
        { COLOR_TYPE::RED, { ui_btnRed, 873 } },
    };

#ifndef UNIT_TEST
    // Get random color list with stage number
    auto colorList = StageGenerator(STAGE_NUM);
    ColorList.SetValue(colorList);
#else
    auto colorList = ColorList.GetValue();
#endif

#ifndef UNIT_TEST
    // Choose correct table
    if (VowelCheck(sys_host::SerialNum.GetValue()))
    {
        mapColorSequence.erase(WITHOUT_VOWEL);
    }
    else
    {
        mapColorSequence.erase(WITH_VOWEL);
    }

    // Set stage #1
    CurrentStage.SetValue(1);
#endif
}

void AutoUpdate()
{
    if (sys_gui::SuccessState.GetState()) {
        if (sys_gui::SuccessState.GetValue() != INCORRECT)
        {
            lv_obj_clear_flag(ui_imgResult, LV_OBJ_FLAG_HIDDEN);

            if (sys_gui::SuccessState.GetValue() == STATE_UNCHECK)
            {
                lv_obj_add_state(ui_imgResult, LV_STATE_DISABLED);
            }
            else if (sys_gui::SuccessState.GetValue() == STATE_CHECKED)
            {
                lv_obj_add_state(ui_imgResult, LV_STATE_CHECKED);
            }

            DeleteTimer();
        }
    }
}

void OnBrightnessChange(lv_event_t* e)
{
    sys_gui::Brightness.SetValue(lv_slider_get_value(ui_sldBrightness));
}

void OnButtonKeypadClick(lv_event_t* e)
{
    // Disable relay button
    lv_obj_add_state(ui_btnReplay, LV_STATE_DISABLED);

    auto currentButton = reinterpret_cast<lv_obj_t*>(e->current_target);
    auto find = std::find_if(mapButton.begin(), mapButton.end(),
        [currentButton](const std::pair<COLOR_TYPE, std::tuple<lv_obj_t*, uint16_t>>& pair) {
            return std::get<0>(pair.second) == currentButton;
        });
    auto result = find->second;
    auto beepFre = std::get<1>(result);

#ifndef UNIT_TEST
    CommonBeep(beepFre, BEEP_INCREASE_DURATION);
#endif

    // Current button is mapped with current order
    if (currentButton == std::get<1>(listButtonOrder[currentSelectButtonIndex]))
    {
        // Check next button later
        currentSelectButtonIndex++;
    }
    else
    {
#ifndef UNIT_TEST
        // Send error to Host
        CommonSendRequest(WM_STRIKESTATE_SET);
#endif

        // Reset select button index
        currentSelectButtonIndex = 0;

        // Show transparent window
        lv_obj_remove_flag(ui_wndTransparent, LV_OBJ_FLAG_HIDDEN);
    }

#ifndef UNIT_TEST
    // All button is corrected with order
    if (currentSelectButtonIndex == listButtonOrder.size())
    {
        auto stage = CurrentStage.GetValue();

        // Update bar stage
        lv_bar_set_value(ui_barStage, stage, LV_ANIM_OFF);

        if (stage < STAGE_NUM)
        {
            // Set to next stage
            CurrentStage.SetValue(stage + 1);

            // Reset select button index
            currentSelectButtonIndex = 0;

            // Show transparent window
            lv_obj_remove_flag(ui_wndTransparent, LV_OBJ_FLAG_HIDDEN);
        }
        else
        {
            // Finish
            sys_gui::SuccessState.SetValue(STATE_CHECKED);

#ifndef UNIT_TEST
            // Send success to Host
            JsonDocument jsonDocIn;
#ifdef _WIN64
            jsonDocIn["module"] = CLIENT_NAME_FOR_JSON;
#else
            jsonDocIn["module"] = CLIENT_NAME;
#endif
            CommonSendRequestWithData(WM_SUCCESSSTATE_SET, jsonDocIn);
#endif
        }
    }
#endif

    // Enable relay button
    lv_obj_remove_state(ui_btnReplay, LV_STATE_DISABLED);
}

void OnButtonReplayClick(lv_event_t * e)
{
    // Disable relay button
    lv_obj_add_state(ui_btnReplay, LV_STATE_DISABLED);

    // Reset button order list
    listButtonOrder.clear();

    // Create correct stage sequence
    auto sequence = SequenceGenerator();

    if (sequence.size())
    {
        // Set sequence order to button list
        for (uint8_t i = 0; i < CurrentStage.GetValue(); i++)
        {
            auto targetButton = std::get<0>(mapButton[sequence[i]]);
            listButtonOrder.push_back(std::make_tuple(sequence[i], targetButton, false));
        }

#ifndef UNIT_TEST
        // Re-create timer
        DeleteTimer();
        CreateTimer();
#endif

#ifdef _WIN64
        debug_println("Stage: " + std::to_string(CurrentStage.GetValue()));
        debug_println("Strike num: " + std::to_string(sys_host::StrikeNum.GetValue()));

        for (uint8_t i = 0; i < sequence.size(); i++)
        {
            debug_println(map_COLOR_TYPE[sequence[i]]);
        }
#endif
    }
}
