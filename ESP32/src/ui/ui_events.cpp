// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.5.0
// LVGL version: 9.1.0
// Project name: SquareLine_Project

#include "ui.h"
#include "../CommonData.h"
#include "../CommonLibrary.h"
#include "../CommonService.h"

struct countdown_timer_t
{
    int8_t second;
    int8_t maxSecond;
    bool timeOut;
    lv_timer_t* countdownTimer;

    void StartTimer(int8_t second)
    {
        // Init data
        this->second = second + 1;
        this->maxSecond = second;
        this->timeOut = false;

        // Set current second
        CurrentSecond.SetValue(second);

        this->countdownTimer = lv_timer_create([](lv_timer_t* timer) {
            auto data = reinterpret_cast<countdown_timer_t*>(lv_timer_get_user_data(timer));

            // Check timeout
            if ((data->second <= 0))
            {
                // Delete timer
                lv_timer_del(timer);
                timer = nullptr;
                data->countdownTimer = nullptr;

                // Set timeout flag
                data->timeOut = true;

                return;
            }

            // Update second
            if (CounterType.GetValue() == COUNTER_TYPE::DOWN)
            {
                // Count down
                if (data->second > 0)
                {
                    data->second--;
                }
            }
            else
            {
                // Count up
                if (data->second < data->maxSecond)
                {
                    data->second++;
                }
            }

            // Update current second
            CurrentSecond.SetValue(data->second);
            }, TIMER_PERIOD_1000, this);
    }
};

countdown_timer_t* countdownTimer = nullptr;

void InitModule(bool renew = true)
{
    // Set counter type
    CounterType.SetValue(COUNTER_TYPE::DOWN);

    // Delete countdown timer
    if (countdownTimer->countdownTimer)
    {
        lv_timer_del(countdownTimer->countdownTimer);
        countdownTimer->countdownTimer = nullptr;
    }

    // Create countdown timer
    countdownTimer->StartTimer(MAX_COUNTDOWN_SEC);

    // Set charger label to focus
    lv_obj_add_state(ui_lblCharger, LV_STATE_FOCUSED);
    lv_bar_set_value(ui_barCharger, BAR_ON, LV_ANIM_ON);

    // Enable handle
    lv_obj_add_flag(ui_conHandleHolder, LV_OBJ_FLAG_CLICKABLE);

#ifdef _WIN64
    ::Beep(BEEP_FRE, 1000);
#else
    // Arduino process
#endif
}

void Init()
{
    // Brightness
    sys_gui::Brightness.SetValue(100);
    lv_slider_set_value(ui_sldBrightness, sys_gui::Brightness.GetValue(), LV_ANIM_OFF);

    // Init timer
    countdownTimer = new countdown_timer_t();

    // Disable handle
    lv_obj_remove_flag(ui_conHandleHolder, LV_OBJ_FLAG_CLICKABLE);

    // Create random module activate timer
    lv_timer_create([](lv_timer_t* timer) {
#ifdef _WIN64
        if (countdownTimer->countdownTimer)
        {
            // Delete timer
            lv_timer_del(timer);
            timer = nullptr;

            return;
        }
#endif

        auto num = RandomRange(0, 100);

        // Check any value, if true, then 10% probability module will be activated
        if (num < 10)
        {
            InitModule();

            // Delete timer
            lv_timer_del(timer);
            timer = nullptr;
        }
        }, TIMER_PERIOD_1000 * 10, nullptr); // 10s
}

void AutoUpdate()
{
    if (CounterType.GetState())
    {
        // Count down mode
        if (CounterType.GetValue() == COUNTER_TYPE::DOWN)
        {
            // Reset to default period
            lv_timer_set_period(countdownTimer->countdownTimer, TIMER_PERIOD_1000);
        }
        // Count up mode
        else
        {
            // Speed up period
            lv_timer_set_period(countdownTimer->countdownTimer, TIMER_PERIOD_100);
        }
    }

    if (CurrentSecond.GetState())
    {
        auto second = CurrentSecond.GetValue();

        if (second >= 0)
        {
            // Update label timer
            lv_label_set_text(ui_lblTimer, std::to_string(second).c_str());

            // Update level bar value
            lv_bar_set_value(ui_barLevel, MAX_COUNTDOWN_SEC - second, LV_ANIM_ON);

            // Humming sound
#ifdef ARDUINO
            // Arduino process
#endif
        }
    }

    if (countdownTimer->timeOut)
    {
        // Clear label timer
        lv_label_set_text(ui_lblTimer, "");

        // Reset timeout flag
        countdownTimer->timeOut = false;

        // Update charger state
        lv_obj_remove_state(ui_lblCharger, LV_STATE_FOCUSED);
        lv_obj_add_state(ui_lblCharger, LV_STATE_DISABLED);

        // Disable handle
        lv_obj_remove_flag(ui_conHandleHolder, LV_OBJ_FLAG_CLICKABLE);

#ifndef UNIT_TEST
        // Send error to Host
        CommonSendRequest(WM_STRIKESTATE_SET);
#endif
    }

    if (sys_gui::SuccessState.GetState()) {
        if (sys_gui::SuccessState.GetValue() != INCORRECT)
        {
            lv_obj_clear_flag(ui_imgResult, LV_OBJ_FLAG_HIDDEN);

            if (sys_gui::SuccessState.GetValue() == STATE_UNCHECK)
            {
                lv_obj_add_state(ui_imgResult, LV_STATE_DISABLED);
            }
            else if (sys_gui::SuccessState.GetValue() == STATE_CHECKED)
            {
                lv_obj_add_state(ui_imgResult, LV_STATE_CHECKED);
            }
        }
    }
}

void OnBrightnessChange(lv_event_t* e)
{
    sys_gui::Brightness.SetValue(lv_slider_get_value(ui_sldBrightness));
}

void OnDebugClick(lv_event_t* e)
{
#ifdef _WIN64
    // Delete countdown timer
    if (countdownTimer->countdownTimer)
    {
        lv_timer_del(countdownTimer->countdownTimer);
        countdownTimer->countdownTimer = nullptr;
    }

    InitModule();
#endif
}

void OnHandlePress(lv_event_t* e)
{
    // Update counter type
    CounterType.SetValue(COUNTER_TYPE::UP);
}

void OnHandleRelease(lv_event_t* e)
{
    // Update counter type
    CounterType.SetValue(COUNTER_TYPE::DOWN);
}
